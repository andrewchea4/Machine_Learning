# -*- coding: utf-8 -*-
"""Untitled31.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LvSkzGbj-YdwSyFAljtNFyi8BU5qpYnA
"""

import pandas as pd
import numpy as np
import seaborn as sns
import re
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers

train = pd.read_csv("/content/drive/MyDrive/기계학습론/train.csv")
train_Drop = train.drop(['belongs_to_collection', 
                         'homepage', 
                         'imdb_id', 
                         'original_language', 
                         'original_title', 
                         'overview', 
                         'poster_path', 
                         'production_companies',
                         'production_countries', 
                         'release_date', 
                         'spoken_languages', 
                         'status', 'tagline', 
                         'title', 'Keywords', 
                         'cast', 
                         'runtime',
                         'crew'],axis=1)

null_value_train = []
null_value_train.append(train_Drop['genres'].isnull())
train_drop = train_Drop.dropna()

test = pd.read_csv("/content/drive/MyDrive/기계학습론/test.csv")
test_Drop = test.drop(['belongs_to_collection', 
                         'homepage', 
                         'imdb_id', 
                         'original_language', 
                         'original_title', 
                         'overview', 
                         'poster_path', 
                         'production_companies',
                         'production_countries', 
                         'release_date', 
                         'spoken_languages', 
                         'status', 'tagline', 
                         'title', 'Keywords', 
                         'cast', 
                         'runtime',
                         'crew'],axis=1)

null_value_test = []
null_value_test.append(test_Drop['genres'].isnull())
test_drop = test_Drop.dropna()

null_index_train = []
for i in range(len(null_value_train[0])):
  if null_value_train[0][i] == True:
    null_index_train.append(int(i))

null_index_test = []
for i in range(len(null_value_test[0])):
  if null_value_test[0][i] == True:
    null_index_test.append(int(i))

train_genre_list = train_drop['genres'].tolist()
test_genre_list = train_drop['genres'].tolist()

train_id_list = []
for i in train_genre_list:

  string = i
  characters = "{ } [ ] '"

  string = ''.join(x for x in string if x not in characters)
  string = string.replace(',',':').split(':')

  for j in range(int(len(string)/4)):
    train_id_list.append(string[4*j+1])


test_id_list = []
for i in test_genre_list:

  string = i
  characters = "{ } [ ] '"

  string = ''.join(x for x in string if x not in characters)
  string = string.replace(',',':').split(':')

  for j in range(int(len(string)/4)):
    test_id_list.append(string[4*j+1])

train_unique_id = []
for i in train_id_list:
  if int(i) not in train_unique_id:
    train_unique_id.append(int(i))
train_unique_id.sort()
print(train_unique_id)

test_unique_id = []
for i in test_id_list:
  if int(i) not in test_unique_id:
    test_unique_id.append(int(i))
test_unique_id.sort()
print(test_unique_id)

for i in train_unique_id:
  train_drop["Genre " + str(i)] = int(0)

for i in test_unique_id:
  test_drop["Genre " + str(i)] = int(0)

for index in range(len(train_drop)+len(null_index_train)):
  if index not in null_index_train:
    string = train_drop.loc[index]['genres']
    characters = "{ } [ ] '"

    string = ''.join(x for x in string if x not in characters)
    string = string.replace(',',':').split(':')

    for i in range(int(len(string)/4)):
      train_drop.loc[index, "Genre " + str(string[4*i+1])] = 1

for index in range(len(test_drop)+len(null_index_test)):
  if index not in null_index_test:
    string = test_drop.loc[index]['genres']
    characters = "{ } [ ] '"

    string = ''.join(x for x in string if x not in characters)
    string = string.replace(',',':').split(':')

    for i in range(int(len(string)/4)):
      test_drop.loc[index, "Genre " + str(string[4*i+1])] = 1

train_final = train_drop.drop(['genres'], axis = 1)
train_label = train_final.pop('revenue')

test_final = test_drop.drop(['genres'], axis = 1)

train_final['id'] = train_final['id'].astype(float)
train_final['budget'] = train_final['budget'].astype(float)
#train_final['revenue'] = train_final['revenue'].astype(float)
train_final['Genre 12'] = train_final['Genre 12'].astype(float)
train_final['Genre 14'] = train_final['Genre 14'].astype(float)
train_final['Genre 16'] = train_final['Genre 16'].astype(float)
train_final['Genre 18'] = train_final['Genre 18'].astype(float)
train_final['Genre 27'] = train_final['Genre 27'].astype(float)
train_final['Genre 28'] = train_final['Genre 28'].astype(float)
train_final['Genre 35'] = train_final['Genre 35'].astype(float)
train_final['Genre 36'] = train_final['Genre 36'].astype(float)
train_final['Genre 37'] = train_final['Genre 37'].astype(float)
train_final['Genre 53'] = train_final['Genre 53'].astype(float)
train_final['Genre 80'] = train_final['Genre 80'].astype(float)
train_final['Genre 99'] = train_final['Genre 99'].astype(float)
train_final['Genre 878'] = train_final['Genre 878'].astype(float)
train_final['Genre 9648'] = train_final['Genre 9648'].astype(float)
train_final['Genre 10402'] = train_final['Genre 10402'].astype(float)
train_final['Genre 10749'] = train_final['Genre 10749'].astype(float)
train_final['Genre 10751'] = train_final['Genre 10751'].astype(float)
train_final['Genre 10752'] = train_final['Genre 10752'].astype(float)
train_final['Genre 10769'] = train_final['Genre 10769'].astype(float)
train_final['Genre 10770'] = train_final['Genre 10770'].astype(float)

test_final['id'] = test_final['id'].astype(float)
test_final['budget'] = test_final['budget'].astype(float)
test_final['Genre 12'] = test_final['Genre 12'].astype(float)
test_final['Genre 14'] = test_final['Genre 14'].astype(float)
test_final['Genre 16'] = test_final['Genre 16'].astype(float)
test_final['Genre 18'] = test_final['Genre 18'].astype(float)
test_final['Genre 27'] = test_final['Genre 27'].astype(float)
test_final['Genre 28'] = test_final['Genre 28'].astype(float)
test_final['Genre 35'] = test_final['Genre 35'].astype(float)
test_final['Genre 36'] = test_final['Genre 36'].astype(float)
test_final['Genre 37'] = test_final['Genre 37'].astype(float)
test_final['Genre 53'] = test_final['Genre 53'].astype(float)
test_final['Genre 80'] = test_final['Genre 80'].astype(float)
test_final['Genre 99'] = test_final['Genre 99'].astype(float)
test_final['Genre 878'] = test_final['Genre 878'].astype(float)
test_final['Genre 9648'] = test_final['Genre 9648'].astype(float)
test_final['Genre 10402'] = test_final['Genre 10402'].astype(float)
test_final['Genre 10749'] = test_final['Genre 10749'].astype(float)
test_final['Genre 10751'] = test_final['Genre 10751'].astype(float)
test_final['Genre 10752'] = test_final['Genre 10752'].astype(float)
test_final['Genre 10769'] = test_final['Genre 10769'].astype(float)
test_final['Genre 10770'] = test_final['Genre 10770'].astype(float)

train_status = train_final.describe()
train_status = train_status.transpose()

label_status = train_label.describe()
label_status = label_status.transpose()

test_status = test_final.describe()
test_status = test_status.transpose()

normal_train = (train_final - train_status['mean']) / train_status['std']
normal_label = (train_label - label_status['mean']) / label_status['std']
normal_test = (test_final - test_status['mean']) / test_status['std']

def modeling():
  model = keras.Sequential([
                            layers.Dense(256, activation='relu', input_shape=[len(train_final.keys())]),
                            layers.Dense(256, activation='relu'),
                            layers.Dense(256, activation='relu'),
                            layers.Dense(256, activation='relu'),
                            layers.Dense(1)
  ])

  model.compile(loss='mse', optimizer='adam', metrics=['mae', 'mse'])

  return model

model = modeling()

model.summary()

model.fit(
    normal_train, normal_label, epochs=1000, validation_split = 0.2, verbose = 0
)

normal_test = normal_test.fillna(0)
test_result = model.predict(normal_test)
test_result

temp_list = []
for value in test_result:
  temp_list.append(abs((value * label_status['std'] + label_status['mean'])).tolist())

prediction_list = []
for value in range(len(temp_list)):
  prediction_list.append(int(temp_list[value][0]))

test_id_list = test_final["id"].tolist()

for i in range(len(test_id_list)):
  test_id_list[i] = int(test_id_list[i])

col_name = ['id', 'revenue']
result_df = pd.DataFrame(index = [], columns=col_name)

result_df['id'] = test_id_list
result_df['revenue'] = prediction_list

result_df
result_df.to_csv("result.csv", mode='w', index=False)

result_df

